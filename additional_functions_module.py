#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π - —Ä–∞–±–æ—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ 1.png, 2.png, 3.png, 4.png
"""

import cv2
import numpy as np
import pyautogui
import pydirectinput
import time
import threading
import os
from typing import Optional, Tuple, List, Dict

class AdditionalFunctionsBot:
    """–ö–ª–∞—Å—Å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    
    def __init__(self):
        self.running = False
        self.thread = None
        self.function_images = {}
        self.confidence = 0.8
        self.load_function_images()
        
    def load_function_images(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        functions = {
            1: "1.png",
            2: "2.png", 
            3: "3.png",
            4: "4.png",
            "1_1": "1_1.png",
            "2_2": "2_2.png",
            "3_3": "3_3.png"
        }
        
        for func_id, filename in functions.items():
            if os.path.exists(filename):
                self.function_images[func_id] = filename
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è {func_id}: {filename}")
            else:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è {func_id}: {filename}")
    
    def find_function(self, func_id) -> Optional[Tuple[int, int, int, int]]:
        """–ò—â–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        if func_id not in self.function_images:
            print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ {func_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return None
        
        try:
            location = pyautogui.locateOnScreen(
                self.function_images[func_id], 
                confidence=self.confidence
            )
            if location:
                return (location.left, location.top, location.width, location.height)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ {func_id}: {e}")
        return None
    
    def find_any_function(self) -> Optional[Tuple[int, int, int, int, int]]:
        """–ò—â–µ—Ç –ª—é–±—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë ID –∏ –ø–æ–∑–∏—Ü–∏—é"""
        for func_id, filename in self.function_images.items():
            try:
                location = pyautogui.locateOnScreen(
                    filename, 
                    confidence=self.confidence
                )
                if location:
                    return (func_id, location.left, location.top, location.width, location.height)
            except Exception as e:
                continue
        return None
    
    def click_function(self, location: Tuple[int, int, int, int]) -> bool:
        """–ö–ª–∏–∫–∞–µ—Ç –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏"""
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            center_x = location[0] + location[2] // 2
            center_y = location[1] + location[3] // 2
            
            # –ö–ª–∏–∫–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É
            pydirectinput.click(center_x, center_y)
            time.sleep(0.5)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
            return False
    
    def click_specific_function(self, func_id) -> bool:
        """–ö–ª–∏–∫–∞–µ—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        location = self.find_function(func_id)
        if location:
            return self.click_function(location)
        else:
            print(f"–§—É–Ω–∫—Ü–∏—è {func_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ")
            return False
    
    def click_any_function(self) -> Optional[int]:
        """–ö–ª–∏–∫–∞–µ—Ç –ø–æ –ª—é–±–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë ID"""
        result = self.find_any_function()
        if result:
            func_id, x, y, w, h = result
            location = (x, y, w, h)
            if self.click_function(location):
                return func_id
        return None
    
    def run_function_loop(self, target_function: Optional[int] = None, debug: bool = False):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
        print(f"‚öôÔ∏è –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Ñ—É–Ω–∫—Ü–∏–π (—Ü–µ–ª—å: {target_function or '–ª—é–±–∞—è'})...")
        
        while self.running:
            try:
                if target_function:
                    # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    location = self.find_function(target_function)
                    if location:
                        if debug:
                            print(f"–ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è {target_function} –≤ –ø–æ–∑–∏—Ü–∏–∏: {location}")
                        
                        if self.click_function(location):
                            print(f"‚úÖ –ö–ª–∏–∫–Ω—É–ª –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏ {target_function}")
                            time.sleep(1)
                    else:
                        if debug:
                            print(f"–§—É–Ω–∫—Ü–∏—è {target_function} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                else:
                    # –ò—â–µ–º –ª—é–±—É—é —Ñ—É–Ω–∫—Ü–∏—é
                    result = self.find_any_function()
                    if result:
                        func_id, x, y, w, h = result
                        if debug:
                            print(f"–ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è {func_id} –≤ –ø–æ–∑–∏—Ü–∏–∏: ({x}, {y}, {w}, {h})")
                        
                        if self.click_function((x, y, w, h)):
                            print(f"‚úÖ –ö–ª–∏–∫–Ω—É–ª –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏ {func_id}")
                            time.sleep(1)
                    else:
                        if debug:
                            print("–§—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                time.sleep(2)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ñ—É–Ω–∫—Ü–∏–π: {e}")
                time.sleep(1)
        
        print("üõë –¶–∏–∫–ª —Ñ—É–Ω–∫—Ü–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def start(self, target_function: Optional[int] = None, debug: bool = False):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
        if self.running:
            print("–†–∞–±–æ—Ç–∞ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return False
        
        self.running = True
        self.thread = threading.Thread(
            target=self.run_function_loop, 
            args=(target_function, debug),
            daemon=True
        )
        self.thread.start()
        print(f"‚úÖ –†–∞–±–æ—Ç–∞ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∑–∞–ø—É—â–µ–Ω–∞ (—Ü–µ–ª—å: {target_function or '–ª—é–±–∞—è'})")
        return True
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
        if not self.running:
            print("–†–∞–±–æ—Ç–∞ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return False
        
        self.running = False
        if self.thread:
            self.thread.join(timeout=2)
        print("üõë –†–∞–±–æ—Ç–∞ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return True
    
    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —Ä–∞–±–æ—Ç–∞ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
        return self.running
    
    def get_available_functions(self) -> List[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        return list(self.function_images.keys())
    
    def test_all_functions(self) -> Dict[int, bool]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        results = {}
        for func_id in self.get_available_functions():
            location = self.find_function(func_id)
            results[func_id] = location is not None
        return results
    
    def execute_function_sequence(self, sequence: List[int]) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π"""
        print(f"üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {sequence}")
        
        for func_id in sequence:
            if not self.running:
                break
                
            print(f"üéØ –í—ã–ø–æ–ª–Ω—è—é —Ñ—É–Ω–∫—Ü–∏—é {func_id}")
            if self.click_specific_function(func_id):
                time.sleep(1)
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é {func_id}")
                return False
        
        print("‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
additional_bot = AdditionalFunctionsBot()

def start_additional_functions(target_function: Optional[int] = None, debug: bool = False) -> bool:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    return additional_bot.start(target_function, debug)

def stop_additional_functions() -> bool:
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    return additional_bot.stop()

def is_additional_functions_running() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —Ä–∞–±–æ—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    return additional_bot.is_running()

def click_function(func_id: int) -> bool:
    """–ö–ª–∏–∫–∞–µ—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    return additional_bot.click_specific_function(func_id)

def click_any_function() -> Optional[int]:
    """–ö–ª–∏–∫–∞–µ—Ç –ø–æ –ª—é–±–æ–π –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    return additional_bot.click_any_function()

def get_available_functions() -> List[int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    return additional_bot.get_available_functions()

def test_functions() -> Dict[int, bool]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    return additional_bot.test_all_functions()

def execute_sequence(sequence: List[int]) -> bool:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π"""
    return additional_bot.execute_function_sequence(sequence)

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    print("‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    available = get_available_functions()
    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {available}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π:")
    results = test_functions()
    for func_id, found in results.items():
        status = "‚úÖ" if found else "‚ùå"
        print(f"{status} –§—É–Ω–∫—Ü–∏—è {func_id}: {'–Ω–∞–π–¥–µ–Ω–∞' if found else '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ª—é–±–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    print("\nüéØ –ü–æ–∏—Å–∫ –ª—é–±–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:")
    result = additional_bot.find_any_function()
    if result:
        func_id, x, y, w, h = result
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è {func_id} –≤ –ø–æ–∑–∏—Ü–∏–∏: ({x}, {y}, {w}, {h})")
    else:
        print("‚ÑπÔ∏è –§—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞)")
    
    print("\nüéØ –ú–æ–¥—É–ª—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
