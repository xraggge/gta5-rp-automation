#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏ –∫–ª–∏–∫ –ø–æ –Ω–æ–º–µ—Ä–∞–º
"""

import cv2
import numpy as np
import pyautogui
import pydirectinput
import time
import threading
import os
from typing import Optional, Tuple, List

class NumberBot:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏"""
    
    def __init__(self):
        self.running = False
        self.thread = None
        self.number_images = {}
        self.confidence = 0.8
        self.load_number_images()
        
    def load_number_images(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤"""
        for i in range(1, 21):  # number_1.jpg –¥–æ number_20.jpg
            filename = f"number_{i}.jpg"
            if os.path.exists(filename):
                self.number_images[i] = filename
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–º–µ—Ä {i}: {filename}")
            else:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä {i}: {filename}")
    
    def find_number(self, number: int) -> Optional[Tuple[int, int, int, int]]:
        """–ò—â–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        if number not in self.number_images:
            print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return None
        
        try:
            location = pyautogui.locateOnScreen(
                self.number_images[number], 
                confidence=self.confidence
            )
            if location:
                return (location.left, location.top, location.width, location.height)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–∞ {number}: {e}")
        return None
    
    def find_any_number(self) -> Optional[Tuple[int, int, int, int, int]]:
        """–ò—â–µ—Ç –ª—é–±–æ–π –Ω–æ–º–µ—Ä –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–æ–∑–∏—Ü–∏—é"""
        for number, filename in self.number_images.items():
            try:
                location = pyautogui.locateOnScreen(
                    filename, 
                    confidence=self.confidence
                )
                if location:
                    return (number, location.left, location.top, location.width, location.height)
            except Exception as e:
                continue
        return None
    
    def click_number(self, location: Tuple[int, int, int, int]) -> bool:
        """–ö–ª–∏–∫–∞–µ—Ç –ø–æ –Ω–æ–º–µ—Ä—É"""
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            center_x = location[0] + location[2] // 2
            center_y = location[1] + location[3] // 2
            
            # –ö–ª–∏–∫–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É
            pydirectinput.click(center_x, center_y)
            time.sleep(0.5)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É: {e}")
            return False
    
    def click_specific_number(self, number: int) -> bool:
        """–ö–ª–∏–∫–∞–µ—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –Ω–æ–º–µ—Ä—É"""
        location = self.find_number(number)
        if location:
            return self.click_number(location)
        else:
            print(f"–ù–æ–º–µ—Ä {number} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —ç–∫—Ä–∞–Ω–µ")
            return False
    
    def click_any_number(self) -> Optional[int]:
        """–ö–ª–∏–∫–∞–µ—Ç –ø–æ –ª—é–±–æ–º—É –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ"""
        result = self.find_any_number()
        if result:
            number, x, y, w, h = result
            location = (x, y, w, h)
            if self.click_number(location):
                return number
        return None
    
    def run_number_loop(self, target_number: Optional[int] = None, debug: bool = False):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏"""
        print(f"üî¢ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –Ω–æ–º–µ—Ä–æ–≤ (—Ü–µ–ª—å: {target_number or '–ª—é–±–æ–π'})...")
        
        while self.running:
            try:
                if target_number:
                    # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–æ–º–µ—Ä
                    location = self.find_number(target_number)
                    if location:
                        if debug:
                            print(f"–ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä {target_number} –≤ –ø–æ–∑–∏—Ü–∏–∏: {location}")
                        
                        if self.click_number(location):
                            print(f"‚úÖ –ö–ª–∏–∫–Ω—É–ª –ø–æ –Ω–æ–º–µ—Ä—É {target_number}")
                            time.sleep(1)
                    else:
                        if debug:
                            print(f"–ù–æ–º–µ—Ä {target_number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    # –ò—â–µ–º –ª—é–±–æ–π –Ω–æ–º–µ—Ä
                    result = self.find_any_number()
                    if result:
                        number, x, y, w, h = result
                        if debug:
                            print(f"–ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä {number} –≤ –ø–æ–∑–∏—Ü–∏–∏: ({x}, {y}, {w}, {h})")
                        
                        if self.click_number((x, y, w, h)):
                            print(f"‚úÖ –ö–ª–∏–∫–Ω—É–ª –ø–æ –Ω–æ–º–µ—Ä—É {number}")
                            time.sleep(1)
                    else:
                        if debug:
                            print("–ù–æ–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                time.sleep(2)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –Ω–æ–º–µ—Ä–æ–≤: {e}")
                time.sleep(1)
        
        print("üõë –¶–∏–∫–ª –Ω–æ–º–µ—Ä–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def start(self, target_number: Optional[int] = None, debug: bool = False):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –Ω–æ–º–µ—Ä–∞–º–∏"""
        if self.running:
            print("–†–∞–±–æ—Ç–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return False
        
        self.running = True
        self.thread = threading.Thread(
            target=self.run_number_loop, 
            args=(target_number, debug),
            daemon=True
        )
        self.thread.start()
        print(f"‚úÖ –†–∞–±–æ—Ç–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∑–∞–ø—É—â–µ–Ω–∞ (—Ü–µ–ª—å: {target_number or '–ª—é–±–æ–π'})")
        return True
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –Ω–æ–º–µ—Ä–∞–º–∏"""
        if not self.running:
            print("–†–∞–±–æ—Ç–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return False
        
        self.running = False
        if self.thread:
            self.thread.join(timeout=2)
        print("üõë –†–∞–±–æ—Ç–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return True
    
    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —Ä–∞–±–æ—Ç–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏"""
        return self.running
    
    def get_available_numbers(self) -> List[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤"""
        return list(self.number_images.keys())
    
    def test_all_numbers(self) -> dict:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤"""
        results = {}
        for number in self.get_available_numbers():
            location = self.find_number(number)
            results[number] = location is not None
        return results

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
number_bot = NumberBot()

def start_number_bot(target_number: Optional[int] = None, debug: bool = False) -> bool:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –Ω–æ–º–µ—Ä–∞–º–∏"""
    return number_bot.start(target_number, debug)

def stop_number_bot() -> bool:
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –Ω–æ–º–µ—Ä–∞–º–∏"""
    return number_bot.stop()

def is_number_bot_running() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —Ä–∞–±–æ—Ç–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏"""
    return number_bot.is_running()

def click_number(number: int) -> bool:
    """–ö–ª–∏–∫–∞–µ—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –Ω–æ–º–µ—Ä—É"""
    return number_bot.click_specific_number(number)

def click_any_number() -> Optional[int]:
    """–ö–ª–∏–∫–∞–µ—Ç –ø–æ –ª—é–±–æ–º—É –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É"""
    return number_bot.click_any_number()

def get_available_numbers() -> List[int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤"""
    return number_bot.get_available_numbers()

def test_numbers() -> dict:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤"""
    return number_bot.test_all_numbers()

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    print("üî¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –Ω–æ–º–µ—Ä–æ–≤...")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
    available = get_available_numbers()
    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {available}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–æ–≤
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤:")
    results = test_numbers()
    for number, found in results.items():
        status = "‚úÖ" if found else "‚ùå"
        print(f"{status} –ù–æ–º–µ—Ä {number}: {'–Ω–∞–π–¥–µ–Ω' if found else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ª—é–±–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    print("\nüéØ –ü–æ–∏—Å–∫ –ª—é–±–æ–≥–æ –Ω–æ–º–µ—Ä–∞:")
    result = number_bot.find_any_number()
    if result:
        number, x, y, w, h = result
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä {number} –≤ –ø–æ–∑–∏—Ü–∏–∏: ({x}, {y}, {w}, {h})")
    else:
        print("‚ÑπÔ∏è –ù–æ–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞)")
    
    print("\nüéØ –ú–æ–¥—É–ª—å –Ω–æ–º–µ—Ä–æ–≤ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
