#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å —Ç–æ–∫–∞—Ä–∫–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Ç–æ–∫–∞—Ä–Ω—ã–º —Å—Ç–∞–Ω–∫–æ–º
"""

import cv2
import numpy as np
import pyautogui
import pydirectinput
import time
import threading
from typing import Optional, Tuple

class TokarkaBot:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–∞—Ä–Ω—ã–º —Å—Ç–∞–Ω–∫–æ–º"""
    
    def __init__(self):
        self.running = False
        self.thread = None
        self.tokarka_image = "Tokarka.png"
        self.confidence = 0.8
        
    def find_tokarka(self) -> Optional[Tuple[int, int, int, int]]:
        """–ò—â–µ—Ç —Ç–æ–∫–∞—Ä–Ω—ã–π —Å—Ç–∞–Ω–æ–∫ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        try:
            location = pyautogui.locateOnScreen(
                self.tokarka_image, 
                confidence=self.confidence
            )
            if location:
                return (location.left, location.top, location.width, location.height)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–∫–∞—Ä–∫–∏: {e}")
        return None
    
    def click_tokarka(self, location: Tuple[int, int, int, int]) -> bool:
        """–ö–ª–∏–∫–∞–µ—Ç –ø–æ —Ç–æ–∫–∞—Ä–Ω–æ–º—É —Å—Ç–∞–Ω–∫—É"""
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            center_x = location[0] + location[2] // 2
            center_y = location[1] + location[3] // 2
            
            # –ö–ª–∏–∫–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É
            pydirectinput.click(center_x, center_y)
            time.sleep(0.5)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ç–æ–∫–∞—Ä–∫–µ: {e}")
            return False
    
    def start_work(self) -> bool:
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Ç–æ–∫–∞—Ä–Ω—ã–º —Å—Ç–∞–Ω–∫–æ–º"""
        try:
            # –ò—â–µ–º —Ç–æ–∫–∞—Ä–∫—É
            location = self.find_tokarka()
            if not location:
                print("–¢–æ–∫–∞—Ä–Ω—ã–π —Å—Ç–∞–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —ç–∫—Ä–∞–Ω–µ")
                return False
            
            # –ö–ª–∏–∫–∞–µ–º –ø–æ —Ç–æ–∫–∞—Ä–∫–µ
            if not self.click_tokarka(location):
                return False
            
            # –ù–∞–∂–∏–º–∞–µ–º –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
            pydirectinput.press('e')  # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
            time.sleep(0.5)
            pydirectinput.press('space')  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            time.sleep(0.5)
            
            print("–†–∞–±–æ—Ç–∞ —Å —Ç–æ–∫–∞—Ä–Ω—ã–º —Å—Ç–∞–Ω–∫–æ–º –Ω–∞—á–∞—Ç–∞")
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–∞—Ä–∫–æ–π: {e}")
            return False
    
    def stop_work(self) -> bool:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Ç–æ–∫–∞—Ä–Ω—ã–º —Å—Ç–∞–Ω–∫–æ–º"""
        try:
            # –ù–∞–∂–∏–º–∞–µ–º Escape –¥–ª—è –≤—ã—Ö–æ–¥–∞
            pydirectinput.press('escape')
            time.sleep(0.5)
            
            print("–†–∞–±–æ—Ç–∞ —Å —Ç–æ–∫–∞—Ä–Ω—ã–º —Å—Ç–∞–Ω–∫–æ–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–∞—Ä–∫–æ–π: {e}")
            return False
    
    def run_tokarka_loop(self, debug: bool = False):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Ç–æ–∫–∞—Ä–∫–∏"""
        print("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Ç–æ–∫–∞—Ä–∫–∏...")
        
        while self.running:
            try:
                # –ò—â–µ–º —Ç–æ–∫–∞—Ä–∫—É
                location = self.find_tokarka()
                
                if location:
                    if debug:
                        print(f"–¢–æ–∫–∞—Ä–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏: {location}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                    
                    # –ù–∞–∂–∏–º–∞–µ–º E –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                    pydirectinput.press('e')
                    time.sleep(1)
                    
                    # –ù–∞–∂–∏–º–∞–µ–º –ø—Ä–æ–±–µ–ª –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    pydirectinput.press('space')
                    time.sleep(2)
                    
                else:
                    if debug:
                        print("–¢–æ–∫–∞—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ–∂–∏–¥–∞–Ω–∏–µ...")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                time.sleep(3)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ç–æ–∫–∞—Ä–∫–∏: {e}")
                time.sleep(1)
        
        print("üõë –¶–∏–∫–ª —Ç–æ–∫–∞—Ä–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def start(self, debug: bool = False):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–∫–∞—Ä–∫—É"""
        if self.running:
            print("–¢–æ–∫–∞—Ä–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return False
        
        self.running = True
        self.thread = threading.Thread(
            target=self.run_tokarka_loop, 
            args=(debug,),
            daemon=True
        )
        self.thread.start()
        print("‚úÖ –¢–æ–∫–∞—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞")
        return True
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–∫–∞—Ä–∫—É"""
        if not self.running:
            print("–¢–æ–∫–∞—Ä–∫–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return False
        
        self.running = False
        if self.thread:
            self.thread.join(timeout=2)
        print("üõë –¢–æ–∫–∞—Ä–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return True
    
    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —Ç–æ–∫–∞—Ä–∫–∞"""
        return self.running

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
tokarka_bot = TokarkaBot()

def start_tokarka(debug: bool = False) -> bool:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–∫–∞—Ä–∫—É"""
    return tokarka_bot.start(debug)

def stop_tokarka() -> bool:
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–∫–∞—Ä–∫—É"""
    return tokarka_bot.stop()

def is_tokarka_running() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —Ç–æ–∫–∞—Ä–∫–∞"""
    return tokarka_bot.is_running()

def run_tokarka(debug: bool = False):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ–∫–∞—Ä–∫—É (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    return start_tokarka(debug)

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è —Ç–æ–∫–∞—Ä–∫–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    import os
    if os.path.exists("Tokarka.png"):
        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ Tokarka.png –Ω–∞–π–¥–µ–Ω–æ")
    else:
        print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ Tokarka.png –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ç–æ–∫–∞—Ä–∫–∏
    location = tokarka_bot.find_tokarka()
    if location:
        print(f"‚úÖ –¢–æ–∫–∞—Ä–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏: {location}")
    else:
        print("‚ÑπÔ∏è –¢–æ–∫–∞—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞)")
    
    print("üéØ –ú–æ–¥—É–ª—å —Ç–æ–∫–∞—Ä–∫–∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
